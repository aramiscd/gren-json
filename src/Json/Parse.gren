module Json.Parse exposing
    ( run
    , json
    )

{-| JSON parser

---
---

## Parser

---

@docs run

---
---

## Internals

---

@docs json

-}

import Json exposing ( Json )
import Json.Tokenizer as Tokenizer exposing ( Token, tokenize )
import TokenParser as Parse exposing ( Parser, Result )


{-| Parse und verwirf optionalen Whitespace
-}
whitespace : Parser Token dst
whitespace input =
    when Array.popFirst input is
        Just { first = Tokenizer.JsonWhitespace _, rest } ->
            Just { backlog = rest, values = [] }
        _ ->
            Just { backlog = input, values = [] }


{-| Parse und verwirf Tokens
-}
discard : Array src -> Parser src dst
discard match input =
    let
        parse = Parse.values match |> Parse.map ( \ _ -> [] )
    in
        parse input


{-| Parse ein Schlüssel-Wert-Paar eines JSON-Objektes
-}
member : Parser Token { key : Json, value : Json }
member input =
    when whitespace input is
        Nothing -> Nothing
        Just r1 -> when string r1.backlog is
            Nothing -> Nothing
            Just r2 -> when r2.values is
                [ Json.String k ] -> when whitespace r2.backlog is
                    Nothing -> Nothing
                    Just r3 -> when discard [ Tokenizer.JsonDelimiter ":" ] r3.backlog is
                        Nothing -> Nothing
                        Just r4 -> when value r4.backlog is
                            Nothing -> Nothing
                            Just r5 -> when r5.values is
                                [ v ] ->
                                    Just
                                        { backlog = r5.backlog
                                        , values = [ { key = Json.String k, value = v } ]
                                        }
                                _ -> Nothing
                _ -> Nothing


nextMember : Array Token -> Maybe ( Result Token { key : Json, value : Json } )
nextMember input =
    when discard [ Tokenizer.JsonDelimiter "," ] input is
        Nothing -> Nothing
        Just r1 ->
            when member r1.backlog is
                Nothing -> Nothing
                r2 -> r2


moreMembers :
    Result Token { key : Json, value : Json } ->
    Maybe ( Result Token { key : Json, value : Json } )
moreMembers acc =
    when nextMember acc.backlog is
        Nothing -> Just acc
        Just r1 -> moreMembers { backlog = r1.backlog, values = acc.values ++ r1.values }


{-| Parse die Schlüssel-Wert-Paare eines JSON-Objektes
-}
members : Parser Token { key : Json, value : Json }
members input =
    when member input is
        Nothing ->
            when whitespace input is
                Nothing -> Nothing
                r1 -> r1
        Just r2 ->
            moreMembers r2


{-| Parse ein JSON-Objekt
-}
object : Parser Token Json
object input =
    when  discard [ Tokenizer.JsonDelimiter "{" ] input is
        Nothing -> Nothing
        Just r1 ->
            when members r1.backlog is
                Nothing -> Nothing
                Just r2 ->
                    when discard [ Tokenizer.JsonDelimiter "}" ] r2.backlog is
                        Nothing -> Nothing
                        Just r3 ->
                            Just
                                { backlog = r3.backlog
                                , values = [ Json.Object r2.values ]
                                }


nextElement : Parser Token Json
nextElement input =
    when discard [ Tokenizer.JsonDelimiter "," ] input is
        Nothing -> Nothing
        Just r1 ->
            when value r1.backlog is
                Nothing -> Nothing
                r2 -> r2


moreElements : Result Token Json -> Maybe ( Result Token Json )
moreElements acc =
    when nextElement acc.backlog is
        Nothing -> Just acc
        Just r1 ->
            moreElements
                { backlog = r1.backlog
                , values = acc.values ++ r1.values
                }
                                

{-| Parse die Elemente eiens JSON-Array
-}
elements : Parser Token Json
elements input =
    when value input is
        Just r2 -> moreElements r2
        Nothing ->
            when whitespace input is
                Nothing -> Nothing
                r1 -> r1


{-| Parse ein JSON-Array
-}
array : Parser Token Json
array input =
    when discard [ Tokenizer.JsonDelimiter "[" ] input is
        Nothing -> Nothing
        Just parsedLeftBracket ->
            when elements parsedLeftBracket.backlog is
                Nothing -> Nothing
                Just parsedElements ->
                    when discard [ Tokenizer.JsonDelimiter "]" ] parsedElements.backlog is
                        Nothing -> Nothing
                        Just parsedRightBracket ->
                            Just
                                { backlog = parsedRightBracket.backlog
                                , values = [ Json.Array parsedElements.values ]
                                }


{-| Parse einen JSON-String
-}
string : Parser Token Json
string input =
    when Array.popFirst input is
        Just { first = Tokenizer.JsonAtom ( Json.String s ), rest } ->
            Just
                { backlog = rest
                , values = [ Json.String s ]
                }
        _ ->
            Nothing


{-| Parse eine JSON-Zahl
-}
number : Parser Token Json
number input =
    when Array.popFirst input is
        Just { first = Tokenizer.JsonAtom ( Json.Number x ), rest } ->
            Just
                { backlog = rest
                , values = [ Json.Number x ]
                }
        _ ->
            Nothing


{-| Parse den JSON-Wert `false`
-}
false : Parser Token Json
false input =
    let
        parse =
            Parse.values [ Tokenizer.JsonAtom Json.False ]
            |> Parse.map ( \ _ -> [ Json.False ] )
    in
        parse input

                
{-| Parse den JSON-Wert `true`
-}
true : Parser Token Json
true input =
    let
        parse =
            Parse.values [ Tokenizer.JsonAtom Json.True  ]
            |> Parse.map ( \ _ -> [ Json.True  ] )
    in
        parse input


{-| Parse den JSON-Wert `null`
-}
null : Parser Token Json
null input =
    let
        parse =
            Parse.values [ Tokenizer.JsonAtom Json.Null ]
            |> Parse.map ( \ _ -> [ Json.Null  ] )
    in
        parse input


{-| Parse einen JSON-Wert
-}
value : Parser Token Json
value input =
    when whitespace input is
        Nothing -> Nothing
        Just r1 ->
            when Parse.oneOf [ object, array, string, number, false, true, null ] r1.backlog is
                Nothing -> Nothing
                Just r2 ->
                    when whitespace r2.backlog is
                        Nothing -> Nothing
                        Just r3 -> Just { backlog = r3.backlog, values = r2.values }


{-| Parse a JSON value into an intermediate result
-}
json : String -> Maybe ( Result Token Json )
json input =
    tokenize input |> Maybe.andThen value


{-| Parse a JSON value
-}
run : String -> Maybe Json
run input =
    when json input is
        Just { backlog = [], values = [ jsonValue ] } -> Just jsonValue
        _ -> Nothing
