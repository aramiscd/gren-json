module Json.Parse.String exposing ( string )

import Json exposing ( Json )
import Json.Parse.Number
import Parse exposing ( Parser )


-- Parse einen JSON-String
--
string : Parser Json
string =
    Parse.sequence [ Parse.string "\"", characters, Parse.string "\"" ]
    |> Parse.map ( String.join "" >> Json.String >> Array.singleton )


-- Parse beliebig viele Zeichen
--
characters : Parser String
characters =
    Parse.zeroOrMore character


-- Parse ein einzelnes Zeichen
--
character : Parser String
character =
    Parse.oneOf
        [ unescapedCharacter
        , Parse.sequence [ Parse.string "\\", escape ]
        ]


-- Parse ein einzelnes Zeichen (unescaped)
--
unescapedCharacter : Parser String
unescapedCharacter input =
    case String.uncons input of
        Nothing -> Parse.fail input
        Just { first, rest } ->
            let
                c = Char.toCode first
            in
                if c < 32 || c == 34 || c == 92 || c > 1114111
                then Parse.fail input
                else Parse.string ( String.fromChar first ) input


-- Parse ein Escape-Zeichen
--
escape : Parser String
escape =
    Parse.oneOf
        [ Parse.oneOf <| Array.map Parse.string <| String.split "" "\"\\/bfnrt"
        , Parse.sequence [ Parse.string "u", hex, hex, hex, hex ]
        ]


-- Parse einen hexadezimalen String
--
hex : Parser String
hex =
    Parse.oneOf
        [ Json.Parse.Number.digit
        , Parse.oneOf <| Array.map Parse.string <| String.split "" "ABCDEFabcdef"
        ]
