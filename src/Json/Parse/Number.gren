module Json.Parse.Number exposing ( jsonNumber )

import StringParser as Parse exposing ( Parser, Result )


{-| Parse eine Ganze Zahl
Nur Dezimalnotation, keine führenden Nullen, mit oder ohne führendes Minus
-}
integer : Parser String
integer input =
    let
        parse =
            Parse.oneOf
                [ Parse.sequence [ oneNine, digits ]
                , digit
                , Parse.sequence [ Parse.string "-", oneNine, digits ]
                , Parse.sequence [ Parse.string "-", digit ]
                ]
    in
        parse input


{-| Parse den gebrochenen Teil einer Gleitkommazahl
-}
fraction : Parser String
fraction input =
    when Parse.sequence [ Parse.string ".", digits ] input is
        Nothing -> Just { backlog = input, values = [] }
        result -> result



{-| Parse ein Signum
Achtung: Das wird in der wissenschaftlichen Notation verwendet.
Herkömmlich notierte Zahlen haben eine andere Syntax in JSON!
-}
sign : Parser String
sign input =
    when Parse.oneOf [ Parse.string "+", Parse.string "-" ] input is
        Nothing -> Just { backlog = input, values = [] }
        result -> result


{-| Parse eine positive Ziffer
-}
oneNine : Parser String
oneNine input =
    Parse.oneOf ( Array.map Parse.string ( String.split "" "123456789" ) ) input


{-| Parse eine Ziffer
-}
digit : Parser String
digit input =
    Parse.oneOf [ Parse.string "0", oneNine ] input


{-| Parse so viele Ziffern wie möglich aber mindestens eine
-}
digits : Parser String
digits input =
    when digit input is
        Nothing -> Nothing
        Just result -> Just ( Parse.accumulate digit result )


{-| Parse das Exponentialsuffix der wissenschaftlichen Zahlennotation
-}
exponent : Parser String
exponent input =
    let
        result =
            Parse.oneOf
                [ Parse.sequence [ Parse.string "E", sign, digits ]
                , Parse.sequence [ Parse.string "e", sign, digits ]
                ]
                input
    in
        when result is
            Nothing -> Just { backlog = input, values = [] }
            _ -> result


{-| Parse eine JSON-Zahl
JSON-Zahlen sind entweder Ganze Zahlen oder Gleitkommazahlen, mit oder ohne wissenschftliches Exponentialsuffix.
Nur die Dezimaldarstellung ist zulässig, keine Hexademizalzahlen, keine Oktalzahlen.
-}
jsonNumber : Parser String
jsonNumber input =
    when Parse.sequence [ integer, fraction, exponent ] input is
        Nothing -> Nothing
        Just result -> Just { backlog = result.backlog, values = [ String.join "" result.values ] }
