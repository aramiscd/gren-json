module Main exposing ( main )

import Expect exposing ( Expectation )
import Fuzz exposing ( Fuzzer )
import Test exposing ( Test, test )
import Test.Runner.Node

import Json
import Json.Parse exposing ( json )
-- import Parse exposing ( Parser )



main =
    Test.Runner.Node.run tests


tests =
    Test.concat
        -------------------------------------------------------------------------------------------------------------
        [ Test.fuzz fuzzWhitespace
            "json empty document"
            ( \ ws ->
                json ws
                |> Expect.equal
                    Nothing
            )
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz2 fuzzWhitespace fuzzWhitespace
            "json null"
            ( \ wsl wsr ->
                json ( wsl ++ "null" ++ wsr )
                |> Expect.equal
                    ( Just { backlog = "", values = [ Json.Null ] } )
            )
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz2 fuzzWhitespace fuzzWhitespace
            "json false"
            ( \ wsl wsr ->
                json ( wsl ++ "false" ++ wsr )
                |> Expect.equal
                    ( Just { backlog = "", values = [ Json.False ] } )
            )
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz2 fuzzWhitespace fuzzWhitespace
            "json true"
            ( \ wsl wsr ->
                json ( wsl ++ "true" ++ wsr )
                |> Expect.equal
                    ( Just { backlog = "", values = [ Json.True ] } )
            )
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz3 fuzzWhitespace fuzzNumber fuzzWhitespace
            "json number"
            ( \ wsl n wsr ->
                json ( wsl ++ n ++ wsr )
                |> Expect.equal
                    ( Just { backlog = "", values = [ Json.Number n ] } )
            )
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz3 fuzzWhitespace fuzzString fuzzWhitespace
            "json string"
            ( \ wsl s wsr ->
                json ( wsl ++ s ++ wsr )
                |> Expect.equal
                    ( Just { backlog = "", values = [ Json.String s ] } )
            )
        -------------------------------------------------------------------------------------------------------------
        , test
            "json array []"
            ( \ _ ->
                json "[]"
                |> Expect.equal
                    ( Just { backlog = "", values = [ Json.Array [] ] } )
            )
        -------------------------------------------------------------------------------------------------------------
           , test
               "json array [1,2,3]"
                ( \ _ ->
                    json "[1,2,3]"
                    |> Expect.equal
                        ( Just
                            { backlog = ""
                            , values = [ Json.Array [ Json.Number "1", Json.Number "2", Json.Number "3" ] ]
                            }
                        )
               )
        -------------------------------------------------------------------------------------------------------------
        , test
            "json object {}"
            ( \ _ ->
                json "{}"
                    |> Expect.equal
                        ( Just { backlog = "", values = [ Json.Object [] ] } )
            )
        -------------------------------------------------------------------------------------------------------------
        , test
            "json object {\"a\":1,\"b\":2,\"c\":3}"
            ( \ _ ->
                json "{\"a\":1,\"b\":2,\"c\":3}"
                    |> Expect.equal
                        ( Just
                            { backlog = ""
                            , values =
                                [ Json.Object
                                    [ { key = Json.String "\"a\"", value = Json.Number "1" }
                                    , { key = Json.String "\"b\"", value = Json.Number "2" }
                                    , { key = Json.String "\"c\"", value = Json.Number "3" }
                                    ]
                                ]
                            }
                        )
            )
        -------------------------------------------------------------------------------------------------------------
        ]



-- Fuzzers


fuzzString : Fuzzer String
fuzzString =
    -- todo: das geht grÃ¼ndlicher
    "abcdefgh" |> String.split "" |> Fuzz.oneOfValues |> fuzzZeroOrMore |> Fuzz.map ( \ s -> "\"" ++ s ++ "\"" )


fuzzNumber : Fuzzer String
fuzzNumber =
    Fuzz.sequence
        [ "123456789" |> String.split "" |> Fuzz.oneOfValues
        , "0123456789" |> String.split "" |> Fuzz.oneOfValues |> fuzzZeroOrMore
        ]
    |> Fuzz.map ( String.join "" )


fuzzWhitespace : Fuzzer String
fuzzWhitespace =
    Fuzz.uniformInt 3
    |> Fuzz.map ( \ n -> Array.get n whitespace |> Maybe.withDefault " " )
    |> Fuzz.array
    |> Fuzz.map ( String.join "" )


fuzzZeroOrMore : Fuzzer String -> Fuzzer String
fuzzZeroOrMore fuzzer =
    Fuzz.array fuzzer |> Fuzz.map ( String.join "" )



-- Symbollisten


whitespace : Array String
whitespace =
    [ "\u{0020}"    -- space
    , "\u{000D}"    -- carriage return
    , "\u{000A}"    -- line feed
    , "\u{0009}"    -- tab
    ]
