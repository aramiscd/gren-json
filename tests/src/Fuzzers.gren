module Fuzzers exposing
    ( chars
    , number
    , whitespace
    )

import Fuzz exposing ( Fuzzer )


chars : Fuzzer String
chars =
    Fuzz.oneOfValues ( String.split "" "abcdefgh" )
    |> zeroOrMore


number : Fuzzer String
number =
    let
        oneToNine = Fuzz.oneOfValues ( String.split "" "123456789" )
        zeroToNine = Fuzz.oneOfValues ( String.split "" "0123456789" )
    in
        Fuzz.sequence [ oneToNine, zeroOrMore zeroToNine ]
        |> Fuzz.map ( String.join "" )


whitespace : Fuzzer String
whitespace =
    Fuzz.uniformInt 3
    |> Fuzz.map ( \ n -> Array.get n wsChars |> Maybe.withDefault " " )
    |> Fuzz.array
    |> Fuzz.map ( String.join "" )


zeroOrMore : Fuzzer String -> Fuzzer String
zeroOrMore fuzzer =
    Fuzz.map ( String.join "" ) ( Fuzz.array fuzzer )



-- Symbollisten


wsChars : Array String
wsChars =
    [ "\u{0020}"    -- space
    , "\u{000D}"    -- carriage return
    , "\u{000A}"    -- line feed
    , "\u{0009}"    -- tab
    ]
