module Tests.Effectful exposing ( tests )

import Bytes exposing ( Bytes )
import Expect
import FileSystem
import FileSystem.Path
import Json.Parse
import Task exposing ( Task )
import Test exposing ( Test, test )


{-| Liste alle zu testenden JSON-Dateien auf.

Die auskommentierten Tests kann der Parser auf meinem Rechner nicht stemmen.
Sie scheitern mit dem Fehler: "RangeError: Maximum call stack size exceeded"
-}
testCases : Array TestCase
testCases =
    [ testCase "json-test-data/microsoftedge.github.io/Demos/json-dummy-data/64KB.json"
    , testCase "json-test-data/microsoftedge.github.io/Demos/json-dummy-data/128KB.json"
    , testCase "json-test-data/microsoftedge.github.io/Demos/json-dummy-data/256KB.json"
--  , testCase "json-test-data/microsoftedge.github.io/Demos/json-dummy-data/512KB.json"
--  , testCase "json-test-data/microsoftedge.github.io/Demos/json-dummy-data/1MB.json"
--  , testCase "json-test-data/microsoftedge.github.io/Demos/json-dummy-data/5MB.json"
    --
    , testCase "json-test-data/microsoftedge.github.io/Demos/json-dummy-data/64KB-min.json"
    , testCase "json-test-data/microsoftedge.github.io/Demos/json-dummy-data/128KB-min.json"
    , testCase "json-test-data/microsoftedge.github.io/Demos/json-dummy-data/256KB-min.json"
--  , testCase "json-test-data/microsoftedge.github.io/Demos/json-dummy-data/512KB-min.json"
--  , testCase "json-test-data/microsoftedge.github.io/Demos/json-dummy-data/1MB-min.json"
--  , testCase "json-test-data/microsoftedge.github.io/Demos/json-dummy-data/5MB-min.json"
    -- (negative)
    , testCase "json-test-data/microsoftedge.github.io/Demos/json-dummy-data/missing-colon.json" |> expectFail
    , testCase "json-test-data/microsoftedge.github.io/Demos/json-dummy-data/unterminated.json" |> expectFail
    , testCase "json-test-data/microsoftedge.github.io/Demos/json-dummy-data/binary-data.json" |> expectFail
    --
--  , testCase "json-test-data/raw.githubusercontent.com/json-iterator/test-data/refs/heads/master/large-file.json"
    ]


{-| Tests für alle zu testenden JSON-Dateien in einem Task-Kontext
-}
tests : FileSystem.Permission -> Task Never Test
tests fileSystemPermission =
    testCases
    |> Array.map ( testCaseToTest fileSystemPermission )
    |> Task.sequence
    |> Task.map Test.concat


{-| Datentyp für Testfälle

Ein Testfall besteht aus dem Dateipfad der zu testenden JSON-Datei
und einer Angabe dazu, ob der Parser an diesen Daten scheitern soll oder nicht.
Die Angabe brauchen wir, um den Parser sowohl positiv als auch negativ testen zu können.
-}
type alias TestCase =
    { path : String
    , expectFail : Bool
    }


{-| Erzeuge einen Testfall aus einem Dateipfad.

Der Dateipfad bezieht sich auf die zu testende JSON-Datei.
Wir nehmen standardmäßig an, dass der Test positiv sein soll.
Ein positiver Test ist erfolgreich wenn der Parser erfolgreich ist.
-}
testCase : String -> TestCase
testCase path =
    { path = path
    , expectFail = False
    }


{-| Markiere einen Testfall als negativ.

Ein negativer Test scheitert wenn der Parser erfolgreich ist.
-}
expectFail : TestCase -> TestCase
expectFail file =
    { file | expectFail = True }


{-| Erzeuge aus einem Testfall einen Test.

Dafür wird die Datei gelesen, als UTF-8-String interpretiert und als JSON-Dokument geparst.
Wenn ein Schritt in dieser Kette scheitert, machen wir daraus einen gescheiterten Test.
Wenn alle Schritte in der Kette erfolgreich sind, machen wir daraus einen erfolgreichen Test.
Da wir die zu testende Datei aus dem Dateisystem lesen, ist das Ergebnis ein Task-Wert.
Da wir scheiternde Tasks in scheiternde Tests übersetzen, ist der Task immer erfolgreich.
-}
testCaseToTest : FileSystem.Permission -> TestCase -> Task Never Test
testCaseToTest fileSystemPermission myTestCase =
    FileSystem.readFile fileSystemPermission ( FileSystem.Path.fromPosixString myTestCase.path )
    |> Task.mapError FileSystem.errorToString
    |> Task.andThen bytesToString
    |> Task.map ( testParseJson myTestCase )
    |> Task.onError ( testFail myTestCase )


{-| Decodiere Bytes in einen UTF-8-String.
-}
bytesToString : Bytes -> Task String String
bytesToString bytes =
    case Bytes.toString bytes of
        Just string -> Task.succeed string
        Nothing -> Task.fail "byte sequence isn't valid UTF-8"


{-| Teste, ob ein String vom JSON-Parser so verarbeitet wird wie erwartet.

Der TestCase gibt an, ob der Parser an diesem String scheitern soll oder nicht,
und enthält den Dateipfad zur JSON-Datei, um ihn im Fehlerfall ausgeben zu können.
-}
testParseJson : TestCase -> String -> Test
testParseJson myTestCase testData =
    test myTestCase.path <| \ _ ->
        case { parseResult = Json.Parse.run testData, expectFail = myTestCase.expectFail } of
            { parseResult = Just _, expectFail = False } -> Expect.pass
            { parseResult = Just _, expectFail = True } -> Expect.fail "succeeded but should fail"
            { parseResult = Nothing, expectFail = False } -> Expect.fail "failed but should succeed"
            { parseResult = Nothing, expectFail = True } -> Expect.pass


{-| Erzeuge einen erfolgreichen Task, der einen gescheiterten Test enthält.
-}
testFail : TestCase -> String -> Task Never Test
testFail myTestCase error =
    Task.succeed <| test myTestCase.path <| \ _ -> Expect.fail error
